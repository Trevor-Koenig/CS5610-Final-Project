#version 410 core

// shader from: https://ogldev.org/www/tutorial30/tutorial30.html

layout ( vertices = 3 ) out;

uniform float tessLevel;
uniform mat4 model;
uniform mat4 view;

// attributes of the input CPs
in vec3 WorldPos_CS_in[];
in vec3 Normal_CS_in[];
in vec4 Color_CS_in[];
in vec2 TexCoord_CS_in[];

// attributes of the output CPs
out vec3 WorldPos_ES_in[];
out vec3 Normal_ES_in[];
out vec4 Color_ES_in[];
out vec2 TexCoord_ES_in[];

void main()
{
	// Set the control points of the output patch
	WorldPos_ES_in[gl_InvocationID] = WorldPos_CS_in[gl_InvocationID];
    Normal_ES_in[gl_InvocationID] = Normal_CS_in[gl_InvocationID];
    Color_ES_in[gl_InvocationID] = Color_CS_in[gl_InvocationID];
    TexCoord_ES_in[gl_InvocationID] = TexCoord_CS_in[gl_InvocationID];
    


    const int MIN_TESS_LEVEL = 4;
    const int MAX_TESS_LEVEL = 64;
    const float MIN_DISTANCE = 20;
    const float MAX_DISTANCE = 800;

	vec4 eyeSpacePos00 = view * model * gl_in[0].gl_Position;
    vec4 eyeSpacePos01 = view * model * gl_in[1].gl_Position;
    vec4 eyeSpacePos10 = view * model * gl_in[2].gl_Position;

    // ----------------------------------------------------------------------
    // Step 3: "distance" from camera scaled between 0 and 1
    float distance00 = clamp((abs(eyeSpacePos00.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
    float distance01 = clamp((abs(eyeSpacePos01.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);
    float distance10 = clamp((abs(eyeSpacePos10.z)-MIN_DISTANCE) / (MAX_DISTANCE-MIN_DISTANCE), 0.0, 1.0);

    

	gl_TessLevelOuter[0] = tessLevel;
	gl_TessLevelOuter[1] = tessLevel;
	gl_TessLevelOuter[2] = tessLevel;

	gl_TessLevelInner[0] = tessLevel;
}